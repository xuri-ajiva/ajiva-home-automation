@using web_ui.Services
@using web_ui.Data
@inject DeviceService deviceService;   
@implements IDisposable

<Card Style="width:300px;" Bordered>

    <TitleTemplate>
        @if (_device is not null)
        {
            <div>
                <h5 style="margin: 0">@_device.Name</h5>
            </div>
        }
        else
        {
            <div>Loaing Device @DeviceId</div>
        }
    </TitleTemplate>
    <ChildContent>
        <div style="height: 300px; display: flex; flex-direction: column;justify-items: center;align-items: center">
            @if (_device is not null)
            {
                <h5 style="margin-top: -0.5em">@_device.Description</h5> 
                <Divider Style="margin: 0.7em 0"></Divider>
                <div style="display: grid; justify-items: center; flex: 0 1; min-height: 70px">
                    @if ((_device.LastSeen - DateTime.Now).Duration() < TimeSpan.FromHours(1))
                    {
                        <div style="display: grid; align-items: center; grid-template-columns: 1fr 1fr">
                            <Icon Type="check-circle" Theme="twotone" TwotoneColor="#52c41a" Height="2em" Width="2em"/>
                            <span>Online</span>
                        </div>
                    }
                    else
                    {
                        <div style="display: grid; align-items: center; grid-template-columns: 1fr 1fr">
                            <Icon Type="close-circle" Theme="twotone" TwotoneColor="#f5222d" Height="2em" Width="2em"/>
                            <span>Offline</span>
                        </div>
                    }
                    <Tooltip Title="@("Last Seen")" Placement="Placement.Left">
                        <span>@_device.LastSeen</span>
                    </Tooltip>
                </div>
            }
            else
            {
                <Spin Spinning="@(!_notFound)">
                </Spin>
            }
        </div>
    </ChildContent>
    <ActionTemplate>
        <h7>Updated @_lastUpdated</h7>
    </ActionTemplate>
</Card>

@code {

    void OnClick(string icon)
    {
        Console.WriteLine($"icon {icon} is clicked");
    }

    [Parameter]
    public string DeviceId { get; set; }

    protected override void OnInitialized()
    {
        RunTimer();
    }

    async void RunTimer()
    {
        await Task.Delay(100);
        do
        {
            _device = await deviceService.GetDevice(DeviceId);
            if (_device is null)
            {
                _notFound = true;
            }
            _lastUpdated = DateTime.Now;
            StateHasChanged();
        } while (await _periodicTimer.WaitForNextTickAsync());
    }

    DateTime _lastUpdated = DateTime.Now;

    PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));

    public void Dispose()
    {
        _periodicTimer?.Dispose();
    }

    private Device? _device;
    private bool _notFound = false;
}
