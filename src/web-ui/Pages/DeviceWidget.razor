@using web_ui.Services
@using web_ui.Data
@using System.Net
@using System.Diagnostics
@inject DeviceService deviceService;   
@inject ScanService ScanService;   
@implements IDisposable

<Card Style="width:26em;" Bordered>

    <TitleTemplate>
        @if (_device is not null)
        {
            <div style="display: flex; align-items: center; justify-items: center">
                <div style="flex: 1; font-size: 1.3em">@_device.Name</div>
                <div style="display: flex; gap: 1em; justify-items: center; align-items: center">
                    @if (_online)
                    {
                        <Tooltip Title="@("Last Seen: " + _device.LastSeen)" Placement="Placement.Left">
                            <span>Online</span>
                        </Tooltip>
                        <Icon Type="check-circle" Theme="@IconThemeType.Twotone" TwotoneColor="#52c41a" Height="1.7em" Width="1.7em"/>
                    }
                    else
                    {
                        <Tooltip Title="@("Last Seen: " + _device.LastSeen)" Placement="Placement.Left">
                            <span>Offline</span>
                        </Tooltip>
                        <Icon Type="close-circle" Theme="@IconThemeType.Twotone" TwotoneColor="#f5222d" Height="1.7em" Width="1.7em"/>
                    }
                </div>
            </div>
        }
        else
        {
            <div>Loaing Device @DeviceId</div>
        }
    </TitleTemplate>
    <ChildContent>
        <div style="min-height: 20em; display: flex; flex-direction: column;justify-items: center;align-items: center">
            @if (_device is not null)
            {
                <h5 style="margin-top: -0.5em">@_device.Description</h5>
                <Divider Style="margin: 0.7em 0"></Divider>
                @foreach (var apparatus in _device.Apparatus)
                {
                    <Form Model="1" TModel="int">
                        <Apparatus Value="apparatus" Minimal></Apparatus>
                    </Form>
                }
            }
            else
            {
                <Spin Spinning="@(!_notFound)">
                </Spin>
            }
        </div>
    </ChildContent>
    <ActionTemplate>
        <h7>Updated @_lastUpdated</h7>
        <a style="float: right; margin-right: 1em" href="DeviceView/@DeviceId">Open</a>
    </ActionTemplate>
</Card>

@code {

    void OnClick(string icon)
    {
        Console.WriteLine($"icon {icon} is clicked");
    }

    [Parameter]
    public string DeviceId { get; set; }

    protected override void OnInitialized()
    {
        RunTimer();
    }

    bool _online = false;

    async void RunTimer()
    {
        IPAddress? address = null;

        await Task.Delay(100);
        do
        {
            var uDevice = await deviceService.GetDevice(DeviceId, true);
            if (uDevice is null)
            {
                _notFound = true;
                continue;
            }

            if (_device != uDevice)
            {
                address = new IPAddress(uDevice.IPAddress);
                _device = uDevice;
            }

            _online = await ScanService.IsAvailable(address!);

            _lastUpdated = DateTime.Now;
            StateHasChanged();
        } while (await _periodicTimer.WaitForNextTickAsync());
    }

    DateTime _lastUpdated = DateTime.Now;

    PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));

    public void Dispose()
    {
        _periodicTimer?.Dispose();
    }

    private Device? _device;
    private bool _notFound = false;
}
