@using web_ui.Data
@using AntDesign.Charts
@using OneOf
@using web_ui.Services

@inject DeviceService deviceService 

@if (Value is null)
{
    <Card Style="width: 10em; height: 10em" Size="small">
        <Body>
        <Alert Type="@AlertType.Warning">No Apparatus</Alert>
        </Body>
    </Card>
}
else
{
    @if (Minimal)
    {
        if (Value.Type == IoType.Write)
        {
            <FormItem Label="@Value.Name">
                <Button OnClick="() => Trigger(true)">Trigger HIGH</Button>
                <Button OnClick="() => Trigger(false)">Trigger LOW</Button>
            </FormItem>
        }
        else
        {
            <FormItem Label="@Value.Name">
                <TinyArea Data="@data" Config="timesConfig"></TinyArea>
            </FormItem>
        }
    }
    else
    {
        @if (Value.Type == IoType.Write)
        {
            <Card Style="" Title="@Value.Name" Size="small">
                <Button OnClick="() => Trigger(true)">Trigger HIGH</Button>
                <Button OnClick="() => Trigger(false)">Trigger LOW</Button>
            </Card>
        }
        else
        {
            <Card Style="width: 40em; height: calc(400px + 5em)" Title="@Value.Name" Size="small">
                <Area Data="data" Config="_config"/>
            </Card>
        }
    }
}

<Modal Visible="_confirm" ConfirmLoading="@_progress" OnOk="Send" OnCancel="() => _confirm = false"
       OkText="@(_confirmed ? "Close" : "Confirm")">
    <ChildContent>
        @if (_confirmed)
        {
            @if (_error)
            {
                <Result
                    Status="error"
                    Title="Submission Failed"
                    SubTitle="Check Device Online Status / Update Device Information"/>
            }
            else
            {
                <Result Status="success"
                        Title="Successfully Send"
                        SubTitle="@($"Value.Name should be now {_request}")"/>
            }
        }
        else
        {
            <Result Status="warning"
                    Title="@($"Are you sure you want to trigger the {Value.Name}?")"
                    SubTitle="@($"This will Send {_request} to {Value.Name}")"/>
        }
    </ChildContent>
</Modal>

@code
{
    private async Task Send()
    {
        if (_confirmed)
        {
            _confirm = false;
            return;
        }

        _progress = true;
        StateHasChanged();
        _error = !await deviceService.SetValue(Value, _request);
        _confirmed = true;
        _progress = false;
        StateHasChanged();
    }

    public void Trigger(bool on)
    {
        _confirmed = false;
        _request = on;
        _confirm = true;
        StateHasChanged();
    }

    [Parameter]
    public DeviceApparatus? Value { get; set; }

    [Parameter]
    public bool Minimal { get; set; }

    double average = 0;
    double max = 0;
    double min = 0;

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Value is null)
            return;
        if (Value.Type == IoType.Write) return;
        
        DateTime from;
        DateTime to;

        if (Minimal)
        {
            from = DateTime.Now.AddHours(-1);
            to = DateTime.Now.AddHours(1);
        }
        else
        {
            from = DateTime.Now.AddDays(-5);
            to = DateTime.Now.AddDays(5);
        }

        var rawData = await deviceService.GetApparatusData(Value, from, to);

        average = rawData.Average(x => x.Raw);
        max = rawData.Max(x => x.Raw);
        min = rawData.Min(x => x.Raw);

        data = rawData.Select(x => new {
            time = x.Time.ToString("O"),
            value = x.Raw
        }).ToList();

        timesConfig = new() {
            Width = 200,
            Height = 50,
            XField = "time",
            YField = "value",
            GuideLine = new object[] {
                new {
                    Type = "mean",
                    Text = new {
                        Position = "start",
                        Content = "Average: " + average.ToString("0.00"),
                    }
                }
            }
        };
        _config = new() {
            GuideLine = new[] {
                new GuideLineConfig() {
                    Type = "min", // "max" | "min" | "median" |  "mean"
                    Text = new() {
                        Content = "Min: " + min.ToString("0.00"),
                        Style = new TextStyle() {
                            Fill = "white",
                            Stroke = "black"
                        }
                    }
                },
                new() {
                    Type = "max", // "max" | "min" | "median" |  "mean"
                    Text = new() {
                        Content = "Max: " + max.ToString("0.00"),
                        Style = new TextStyle() {
                            Fill = "white",
                            Stroke = "black"
                        }
                    },
                },
            },
            XField = "time",
            YField = "value",
            Theme = "dark",
            ForceFit = true,
            Smooth = true,
            Title = new() {
                Text = $"Meshurement in {Value.Unit}",
                Visible = true,
            },
            XAxis = new ValueCatTimeAxis {
                Type = "dateTime",
                TickCount = 100,
            },
            Animation = new Animation {
                Appear = new AnimationCfg {
                    Animation = "clipingWithData",
                    Duration = 10,
                },
            },
            Interactions = new[] {
                new Interaction {
                    Type = "slider",
                    Cfg = new {
                        start = 0.1,
                        end = 0.2
                    }
                },
            }
        };
    }

    object data = new();

    TinyAreaConfig timesConfig;
    private AreaConfig _config;
    bool _request = false;

    private bool _confirm = false;
    private bool _progress;
    private bool _confirmed;
    private bool _error;
}
